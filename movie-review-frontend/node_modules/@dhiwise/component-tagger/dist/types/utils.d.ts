import { JSXOpeningElement, JSXElement, File } from '@babel/types';
import { ComponentTagOptions } from './types';
/**
 * Extracts all identifiers imported from Three.js packages in the given AST
 * @param ast The parsed AST of the code
 * @returns Set of imported Three.js identifiers
 */
export declare function getThreeJSImports(ast: File): Set<string>;
/**
 * Determines if a file should be processed based on its extension and path
 * @param filePath The path of the file to check
 * @param options Plugin options
 * @returns Boolean indicating if the file should be processed
 */
export declare function shouldProcessFile(filePath: string, options: ComponentTagOptions): boolean;
/**
 * Determines if an element should be tagged based on its name and options
 * @param elementName The name of the JSX element
 * @param options Plugin options
 * @param threeJSImports Set of imported Three.js identifiers
 * @returns Boolean indicating if the element should be tagged
 */
export declare function shouldTagElement(elementName: string, options: ComponentTagOptions, threeJSImports?: Set<string>): boolean;
/**
 * Extract attributes from JSX opening element
 * @param node The JSX opening element node
 * @param options Plugin options
 * @returns Record of attribute names and values
 */
export declare function extractAttributes(node: JSXOpeningElement, options: ComponentTagOptions, currentElement: JSXElement | undefined): Record<string, string>;
/**
 * Get element name from JSX opening element
 * @param jsxNode The JSX opening element node
 * @returns The element name as a string
 */
export declare function getElementName(jsxNode: JSXOpeningElement): string;
/**
 * Sanitizes a string for use in HTML attributes
 * @param str The string to sanitize
 * @returns The sanitized string
 */
export declare function sanitizeAttributeValue(str: string): string;
/**
 * Creates a unique component ID based on file path and location
 * @param filePath The relative file path
 * @param line The line number
 * @param column The column number
 * @returns A unique component ID string
 */
export declare function createComponentId(filePath: string, line: number, column: number): string;
/**
 * Logs a message if verbose mode is enabled
 * @param message The message to log
 * @param options Plugin options
 */
export declare function verboseLog(message: string, options: ComponentTagOptions): void;
/**
 * Checks if a file is a test file
 * @param filePath The file path to check
 * @returns Boolean indicating if it's a test file
 */
export declare function isTestFile(filePath: string): boolean;
/**
 * Generates a summary of the tagging operation
 * @param stats The statistics object
 * @returns A formatted string with the summary
 */
export declare function generateSummary(stats: {
    totalFiles: number;
    processedFiles: number;
    totalElements: number;
}): string;
/**
 * Detects if the code contains Three.js imports
 * @param ast The parsed AST of the code
 * @returns Boolean indicating if Three.js imports are found
 */
export declare function hasThreeJSImports(ast: File): boolean;
